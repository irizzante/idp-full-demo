#!/usr/bin/env nu

source scripts/kubernetes.nu
source scripts/crossplane.nu
source scripts/get-hyperscaler.nu
source scripts/ingress.nu
source scripts/github.nu
source scripts/kyverno.nu
source scripts/argocd.nu
source scripts/port.nu

def main [] {}

# Builds a container image
def "main build image" [
    tag: string                    # The tag of the image (e.g., 0.0.1)
    --registry = "ghcr.io/vfarcic" # Image registry
    --image = "idp-full-demo"      # Image name
    --push = true                  # Whether to push the image to the registry
] {

    docker image build --tag $"($registry)/($image):latest" .

    docker image tag $"($registry)/($image):latest" $"($registry)/($image):($tag)"

    if $push {

        docker image push $"($registry)/($image):latest"

        docker image push $"($registry)/($image):($tag)"

    }

}

# Executes tests
def "main run unit-tests" [] {

    print "Faking execution of unit-tests..."

}

# Executes tests
def "main update gitops" [
    tag: string                          # The tag of the image (e.g., 0.0.1)
    --registry = "ghcr.io/vfarcic"       # Image registry
    --image = "idp-full-demo"            # Image name
    --source_path = apps/silly-demo.yaml # Source path 
] {

    open $source_path |
        | upsert spec.parameters.image $"($registry)/($image):($tag)"
        | save $source_path --force

}

# Runs all CI tasks
def "main run ci" [
    tag: string                    # The tag of the image (e.g., 0.0.1)
    --registry = "ghcr.io/vfarcic" # Image registry
    --image = "idp-full-demo"      # Image name
] {

    main run unit-tests

    main build image $tag --registry $registry --image $image

    main update gitops $tag --registry $registry --image $image

}

# Sets up the complete demo
def "main setup all" [] {
    
    rm --force .env

    let hyperscaler = main get hyperscaler

    let github_data = main get github

    main create kubernetes kind

    main apply ingress kind nginx

    main apply port $github_data.user

    kubectl create namespace a-team

    main apply kyverno

    main apply argocd "argocd.127.0.0.1.nip.io" false "nginx"

    (
        main apply crossplane
            --hyperscaler $hyperscaler --db true --app true
            --github_user $github_data.user
            --github_token $github_data.token
    )

    cp $"crossplane/($hyperscaler)-sql.yaml" apps/silly-demo-db.yaml

    cp crossplane/app.yaml apps/silly-demo.yaml

    open apps/silly-demo.yaml
        | upsert spec.parameters.image $"ghcr.io/($github_data.user)/idp-full-demo:FIXME:"
        | save apps/silly-demo.yaml --force

    (
        docker login
            --username $github_data.user
            --password $github_data.token
            $"ghcr.io/($github_data.user)"
    )

    gh secret set REGISTRY_PASSWORD $"-b($github_data.token)"

    start $"https://github.com/($github_data.user)/idp-full-demo/settings/actions"

    print $"
    Select (ansi yellow_bold)Read and write permissions(ansi reset) in the (ansi yellow_bold)Workflow permissions(ansi reset) section.
    Click the (ansi yellow_bold)Save(ansi reset) button.
    Press any key to continue.
    "
    input

    gh repo create $"($github_data.user)/idp-full-app" --public

    gh repo clone $"($github_data.user)/idp-full-app"

    cd idp-full-app

    touch README.md

    git add .

    git commit -m "README"

    git push

    cd ..

    rm -rf idp-full-app

}

# Sets up the CLIs demo
def "main setup clis" [] {
    
    rm --force .env

    main create kubernetes kind

    main apply ingress kind nginx

    main apply crossplane --app true

    kubectl create namespace a-team
    
    kubectl --namespace a-team apply --filename crossplane/app-solo.yaml

}

# Destroys the complete demo
def "main destroy all" [] {

    rm --force apps/*.yaml

    main delete crossplane $env.HYPERSCALER

    main destroy kubernetes kind

    main delete port
    
}

# Destroys the CLIs demo
def "main destroy clis" [] {

    gh repo delete $"($env.GITHUB_USER))/idp-full-app"

    main destroy kubernetes kind
    
}
