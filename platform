#!/usr/bin/env nu

source scripts/kubernetes.nu
source scripts/crossplane.nu
source scripts/get-hyperscaler.nu
source scripts/ingress.nu
source scripts/github.nu
source scripts/argocd.nu
source scripts/backstage.nu

def main [] {}

# Builds a container image
def "main build image" [
    tag: string                    # The tag of the image (e.g., 0.0.1)
    --registry = "ghcr.io/vfarcic" # Image registry
    --image = "idp-full-app"       # Image name
    --push = true                  # Whether to push the image to the registry
] {

    docker image build --tag $"($registry)/($image):latest" .

    docker image tag $"($registry)/($image):latest" $"($registry)/($image):($tag)"

    if $push {

        docker image push $"($registry)/($image):latest"

        docker image push $"($registry)/($image):($tag)"

    }

}

# Executes tests
def "main run unit-tests" [] {

    print "Faking execution of unit-tests..."

}

# Executes tests
def "main update gitops" [
    tag: string                          # The tag of the image (e.g., 0.0.1)
    --registry = "ghcr.io/vfarcic"       # Image registry
    --image = "idp-full-app"            # Image name
    --source_path = apps/silly-demo.yaml # Source path 
] {

    open $source_path |
        | upsert spec.parameters.image $"($registry)/($image):($tag)"
        | save $source_path --force

}

# Runs all CI tasks
def "main run ci" [
    tag: string                    # The tag of the image (e.g., 0.0.1)
    --registry = "ghcr.io/vfarcic" # Image registry
    --image = "idp-full-app"      # Image name
] {

    main run unit-tests

    main build image $tag --registry $registry --image $image

    main update gitops $tag --registry $registry --image $image

}

# Sets up the complete demo
def "main setup all" [] {

    rm --force .env

    let hyperscaler = main get hyperscaler
    
    let ingress_data = setup common --hyperscaler $hyperscaler

    let github_data = main get github

    (
        main apply argocd
            --host_name $"argocd.($ingress_data.host)"
            --apply_apps false
            --ingress_class_name $ingress_data.class
    )

    (
        main apply crossplane
            --hyperscaler $hyperscaler
            --db true --app true --github true --skip_login true
            --github_user $github_data.user
            --github_token $github_data.token
    )

    (
        docker login
            --username $github_data.user
            --password $github_data.token
            $"ghcr.io/($github_data.user)"
    )

    open crossplane/app.yaml
        | upsert spec.parameters.image $"ghcr.io/($github_data.user)/idp-full-app"
        | upsert spec.parameters.tag "FIXME"
        | upsert spec.parameters.host $"silly-demo.($ingress_data.host)"
        | upsert spec.parameters.ingressClassName "contour"
        | save crossplane/app.yaml --force

    open argocd/app.yaml
        | upsert spec.source.repoURL $"https://github.com/($github_data.user)/idp-full-app"
        | save argocd/app.yaml --force

    upsert crossplane $hyperscaler $github_data.user

}

# Sets up the Backstage demo
def "main setup backstage" [] {

    rm --force .env

    let hyperscaler = main get hyperscaler
    
    let ingress_data = setup common --hyperscaler $hyperscaler

    let github_data = main get github

    (
        main apply argocd 
            --host_name $"argocd.($ingress_data.host)"
            --apply_apps false
            --ingress_class_name $ingress_data.class
    )

    open argocd/app.yaml
        | upsert spec.source.repoURL $"https://github.com/($github_data.user)/idp-full-app"
        | save argocd/app.yaml --force

    kubectl apply --filename argocd/app.yaml

    main apply crossplane --db true --app true --github true

    open crossplane/app.yaml
        | upsert spec.parameters.image $"ghcr.io/vfarcic/silly-demo"
        | upsert spec.parameters.tag "1.4.342"
        | save crossplane/app.yaml --force

    (
        gh repo create $"($github_data.user)/idp-full-app"
            --public --add-readme
    )

    gh repo clone $"($github_data.user)/idp-full-app"

}

# Sets up the apps demo
def "main setup apps" [] {

    rm --force .env
    
    setup common

    let hyperscaler = main get hyperscaler

    let github_data = main get github

    (
        main apply crossplane --hyperscaler $hyperscaler
            --db true --app true --github true
            --github_user $github_data.user
            --github_token $github_data.token
    )

    upsert crossplane $hyperscaler $github_data.user

}

# Sets up the policies demo
def "main setup policies" [] {

    rm --force .env

    setup common

    main apply crossplane --app true

    mkdir tmp

    cp crossplane/app-solo.yaml tmp/appclaim.yaml

}

# Sets up the CLIs demo
def "main setup clis" [] {

    rm --force .env
    
    setup common

    let github_data = main get github

    main apply crossplane --app true

    kubectl create namespace a-team
    
    kubectl --namespace a-team apply --filename crossplane/app-solo.yaml

}

# Destroys the complete demo
def "main destroy all" [
    hyperscaler: string
    github_user: string
] {

    do --ignore-errors {
        (
            kubectl --namespace a-team delete
                --filename idp-full-app/apps
        )
    }

    do --ignore-errors {
        (
            kubectl --namespace a-team delete
                --filename crossplane/repo.yaml
        )
    }

    cd idp-full-app

    rm --force apps/*.yaml

    touch apps/empty

    git add .

    git commit -m "Destroy [skip ci]"

    git pull

    git push

    cd ..

    main delete crossplane

    main destroy kubernetes $hyperscaler

    gh repo delete $"($github_user)/idp-full-app"
    
}

# Sets up the Backstage demo
def "main destroy backstage" [] {
    
    main destroy kubernetes $env.HYPERSCALER
    
    gh repo delete $"($env.GITHUB_USER)/idp-full-app"

}

# Destroys the apps demo
def "main destroy apps" [] {

    kubectl --namespace a-team delete --filename crossplane/repo.yaml

    kubectl --namespace a-team delete --filename idp-full-app/apps

    main delete crossplane

    if $env.HYPERSCALER == "google" {

        gcloud projects delete $env.PROJECT_ID --quiet

    }

    main destroy kubernetes kind

    gh repo delete $"($env.GITHUB_USER)/idp-full-app"

}

# Destroys the policies demo
def "main destroy policies" [] {

    main destroy kubernetes kind

}

# Destroys the CLIs demo
def "main destroy clis" [] {

    gh repo delete $"($env.GITHUB_USER))/idp-full-app"

    main destroy kubernetes kind
    
}

def "main get resource types" [] {

    (
        kubectl api-resources
            --api-group devopstoolkit.live
            --namespaced --output name
    )
        | detect columns --no-headers
        | rename name
        | str replace --all --regex '.devopstoolkit.live' '' name

}

def "main get resources" [
    resource: string
    --namespace = "default"
] {

    kubectl --namespace $namespace get $resource

}

def "main describe resource" [
    resource: string
    name: string
    --namespace = "default"
] {
    
    kubectl --namespace $namespace describe $resource $name

    print ""
    print ""

    crossplane beta trace --namespace $namespace $resource $name

}

def "upsert crossplane" [
    hyperscaler: string
    github_user: string
] {

    if $hyperscaler == "azure" {

        let date_suffix = (date now | format date "%Y%m%d%H%M%S")

        open crossplane/azure-sql.yaml |
            | upsert spec.id $"silly-demo-db-($date_suffix)"
            | save crossplane/azure-sql.yaml --force

        open crossplane/azure-sql-password.yaml |
            | upsert metadata.name $"silly-demo-db-($date_suffix)-password"
            | save crossplane/azure-sql-password.yaml --force

        open crossplane/app.yaml |
            | upsert spec.parameters.db.secret $"silly-demo-db-($date_suffix)"
            | save crossplane/app.yaml --force

    } else {

        open crossplane/app.yaml |
            | upsert spec.parameters.db.secret "silly-demo-db"
            | save crossplane/app.yaml --force

    }

    open crossplane/app.yaml
        | upsert spec.parameters.image $"ghcr.io/($github_user)/idp-full-app"
        | upsert spec.parameters.tag "FIXME"
        | save crossplane/app.yaml --force

}

def --env "setup common" [
    --hyperscaler = "kind"
] {

    mut ingress_class = "nginx"

    if $hyperscaler != "kind" {
        $ingress_class = "contour"
    }

    rm --force --recursive kubeconfig*.yaml

    rm --force --recursive idp-full-app

    rm --force --recursive backstage

    main create kubernetes $hyperscaler

    let ingress_data = (
        main apply ingress $ingress_class 
        --hyperscaler $hyperscaler
    )

    kubectl create namespace a-team

    {
        ip: $ingress_data.ip,
        host: $"($ingress_data.ip).nip.io",
        class: $ingress_data.class
    }

}
